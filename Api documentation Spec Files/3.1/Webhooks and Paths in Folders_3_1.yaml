openapi: 3.1.0
info:
  title: E-Commerce API
  description: API for managing orders, users, and webhook notifications.
  version: 1.0.0

servers:
  - url: https://api.example.com
    description: Production Server

paths:
  /orders:
    get:
      summary: Get a list of orders
      operationId: getOrders
      responses:
        "200":
          description: A list of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Order"

    post:
      summary: Create a new order
      operationId: createOrder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"
      responses:
        "201":
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"

  /orders/{orderId}:
    get:
      summary: Get order details
      operationId: getOrderDetails
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Order details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"

    patch:
      summary: Update an order
      operationId: updateOrder
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderUpdate"
      responses:
        "200":
          description: Order updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"

  /users:
    get:
      summary: Get a list of users
      operationId: getUsers
      responses:
        "200":
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"

    post:
      summary: Create a new user
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

  /users/{userId}:
    get:
      summary: Get user details
      operationId: getUserDetails
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: User details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

webhooks:
  orderStatusUpdated:
    post:
      summary: Notify when an order status is updated
      operationId: orderStatusWebhook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                orderId:
                  type: string
                status:
                  type: string
                  enum: [pending, completed, canceled]
      responses:
        "200":
          description: Webhook received successfully

components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        status:
          type: string
          enum: [pending, completed, canceled]
        totalAmount:
          type: number
          format: double

    OrderUpdate:
      type: object
      properties:
        status:
          type: string
          enum: [pending, completed, canceled]
        totalAmount:
          type: number
          format: double

    User:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
          format: email

  responses:
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string

  parameters:
    orderId:
      name: orderId
      in: path
      required: true
      schema:
        type: string

  securitySchemes:
    apiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY

security:
  - apiKeyAuth: []
